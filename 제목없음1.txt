App.js

const socket = io(); // socket.io 클라이언트 연결 시도

const myFace = document.getElementById("myFace");
const muteBtn = document.getElementById("mute");
const cameraBtn = document.getElementById("camera");
const camerasSelect = document.getElementById("cameras");

const call = document.getElementById("call");

call.hidden =true;
let myStream;
let muted = false;
let cameraOff = false;
let roomName;
let myPeerConnection;

async function getCameras() {
  try {
    const devices = await navigator.mediaDevices.enumerateDevices();
    const cameras = devices.filter(device => device.kind === "videoinput");
    const currentCamera = myStream.getVideoTracks()[0];
    cameras.forEach((camera) => {
      const option = document.createElement("option");
      option.value = camera.deviceId;
      option.innerText = camera.label;
      if (currentCamera.label === camera.label) {
        option.selected = true;
      }
      
      camerasSelect.appendChild(option);
    });
    
    console.log(cameras);
  } catch (e) {
    console.log(e);
  }
}


async function getMedia(deviceId) {
  const initialConstraints = {
    audio: true,
    video: { facingMode: "user" },
  };
  
  const cameraConstraints = {
    audio: true,
    video: { deviceId: { exact: deviceId } },
  };
  
  
    try {
      myStream = await navigator.mediaDevices.getUserMedia(
        deviceId?cameraConstraints:initialConstraints);
      
      myFace.srcObject = myStream;
      if(!deviceId){
        await getCameras();
      }
      
    } catch (e) {
      console.log(e);
    }
  };
  

function handleMuteClick() {

  myStream
  .getAudioTracks()
  .forEach((track) => (track.enabled = !track.enabled));
  if (!muted) {
    muteBtn.innerText = "Unmute";
    muted = true;
  } else {
    muteBtn.innerText = "Mute";
    muted = false;
  }
}

function handleCameraClick() {
    myStream
    .getVideoTracks()
    .forEach((track) => (track.enabled = !track.enabled));
    
    if (cameraOff) {
      cameraBtn.innerText = "Turn Camera Off";
      cameraOff = false;
    } else {
      cameraBtn.innerText = "Turn Camera On";
      cameraOff = true;
    }
 }
  
async function handleCameraChange(){
  await getMedia(camerasSelect.value);
  
  if (myPeerConnection) {
    const videoTrack = myStream.getVideoTracks()[0];
    const videoSender = myPeerConnection
      .getSenders()
      .find((sender) => sender.track.kind === "video");
    videoSender.replaceTrack(videoTrack);
  }
  
}

muteBtn.addEventListener("click", handleMuteClick);
cameraBtn.addEventListener("click", handleCameraClick);
camerasSelect.addEventListener("input", handleCameraChange);


// Welcome From Join a Room
const welcome = document.getElementById("welcome");
const welcomeForm = welcome.querySelector("form");

async function initCall(){
  welcome.hidden = true;
  call.hidden = false;
  await getMedia();
  makeConnection();
}


function handleWelcomeSubmit(event) {
  event.preventDefault();
  const input = welcomeForm.querySelector("input");
  initCall();

  socket.emit("join_room", input.value);
  roomName = input.value;
  input.value = "";
}

welcomeForm.addEventListener("submit", handleWelcomeSubmit);


// Socket Code
socket.on("welcome", async () => {
  const offer = await myPeerConnection.createOffer();
  myPeerConnection.setLocalDescription(offer);
  console.log("sent the offer");
  socket.emit("offer", offer, roomName);
});


socket.on("offer", async (offer) => {
  console.log("receive the offer");

  //GPT가 수정 해주내용 
  if (!myPeerConnection) {
    await getMedia();
    makeConnection();
  }
  myPeerConnection.setRemoteDescription(offer);
  const answer = await myPeerConnection.createAnswer();
  console.log(answer);
  myPeerConnection.setLocalDescription(answer);
  
  socket.emit("answer", answer, roomName);
  console.log("sent the answer");
});

socket.on("answer", answer => {
  console.log("receive the answer");
  myPeerConnection.setRemoteDescription(answer);
});

// socket.on("ice", (ice) => {
//   console.log("received the candidate");
//   myPeerConnection.addIceCandidate(ice);
// });

//GPT보강
socket.on("ice", (ice) => {
  console.log("received the candidate");
  if (myPeerConnection) {
    myPeerConnection.addIceCandidate(ice);
  } else {
    console.warn("ICE candidate received before peer connection is ready");
  }
});


//RTC Code
function makeConnection() {
  myPeerConnection = new RTCPeerConnection();
  myPeerConnection.addEventListener("icecandidate", handleIce);
  myPeerConnection.addEventListener("addstream", handleAddStream);


  myStream
    .getTracks()
    .forEach((track) => myPeerConnection.addTrack(track, myStream));
}

function handleIce(data) {
  console.log("sent the candidate");
  socket.emit("ice", data.candidate, roomName);

}
function handleAddStream(data) {
  const peerFace = document.getElementById("peerFace");
  peerFace.srcObject = data.stream;

  // console.log("Peer:",data.stream);
  // console.log("my :", myStream);
}





home.pug

doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(http-equiv="X-UA-Compatible", content="IE=edge")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Noom
    link(rel="stylesheet", href="https://unpkg.com/mvp.css")
  body
    header 
      h1 Room 
    main
      div#welcome
        form
          input(placeholder="room name", required, type="text")
          button Enter room

      div#call
        div#myStream
          video#myFace(autoplay, playsinline, width="400", height="400")
          button#mute Mute
          button#camera Turn Camera off
          select#cameras
          video#peerFace(autoplay playsinline width="400" height="400")
          

    script(src="/socket.io/socket.io.js")
    script(src="/public/js/app.js")
    
    

import http from "http";
import express from "express";
import SocketIo from "socket.io"

const app = express();

app.set("view engine", "pug");
app.set("views", __dirname + "/views");
app.use("/public", express.static(__dirname + "/public"));

app.get("/", (_, res) => res.render("home"));
app.get("/*", (_, res) => res.redirect("/"));

const httpServer = http.createServer(app);
const wsServer = SocketIo(httpServer);

wsServer.on("connection", (socket) => {
    socket.on("join_room", (roomName) => {
      socket.join(roomName);
       socket.to(roomName).emit("welcome");
    });

    socket.on("offer", (offer, roomName) => {
        socket.to(roomName).emit("offer", offer);
    });

    socket.on("answer", (answer, roomName) => {
        socket.to(roomName).emit("answer", answer);
    });

    socket.on("ice", (ice, roomName) => {
        socket.to(roomName).emit("ice", ice);
    });
      
  });
  

const handleListen = () => console.log("Listening on http://localhost:3000");
httpServer.listen(3000, handleListen);